Исходные данные имеют следующую структуру:

1. перечень всех документов

documents = [
{‘type’: ‘passport’, ‘number’: ‘2207 876234’, ‘name’: ‘Василий Гупкин’},
{‘type’: ‘invoice’, ‘number’: ‘11-2’, ‘name’: ‘Геннадий Покемонов’},
{‘type’: ‘insurance’, ‘number’: ‘10006’, ‘name’: ‘Аристарх Павлов’}
]

2.перечень полок, на которых хранятся документы (если документ есть в documents, то он обязательно должен быть и в directories)

directories = {
‘1’: [‘2207 876234’, ‘11-2’],
‘2’: [‘10006’],
‘3’: []
}

Общие требования к программе:

код должен быть грамотно декомпозирован (каждая функция отвечает за свою конкретную задачу, дублирующийся функционал переиспользуется, а его код не повторяется);
в коде отсутствуют глобальные переменные (за исключением documents и directories);
пользовательский ввод обрабатывается в цикле while до тех пор, пока пользователь явно не завершит программу (вводом команды “q”).

Необходимо реализовать пользовательские команды (внимание! это не название функций, которые должны быть выразительными, а команды, которые вводит пользователь, чтобы получить необходимый результат):

p – people – команда, которая спросит номер документа и выведет имя человека, которому он принадлежит;
s – shelf – команда, которая спросит номер документа и выведет номер полки, на которой он находится
Правильно обработайте ситуацию, когда пользователь будет вводить несуществующий документ.
l – list – команда, которая выведет список всех документов в формате
passport "2207 876234" "Василий Гупкин"
as – add shelf – команда, которая спросит номер новой полки и добавит ее в перечень
d – delete – команда, которая спросит номер документа и удалит его из каталога и из перечня полок. Предусмотрите сценарий, когда пользователь вводит несуществующий документ;
m – move – команда, которая спросит номер документа и целевую полку и переместит его с текущей полки на целевую. Корректно обработайте кейсы, когда пользователь пытается переместить несуществующий документ или переместить документ на несуществующую полку;
a – add – команда, которая добавит новый документ в каталог и в перечень полок, спросив его номер, тип, имя владельца и номер полки, на котором он будет храниться.

Задание 1
Пункт 1. Пользователь по команде “p” может узнать владельца документа по его номеру
#p – people – команда, которая спросит номер документа и выведет имя человека, которому он принадлежит;
documents = [
    {'type': 'passport', 'number': '2207 876234', 'name': 'Василий Гупкин'},
    {'type': 'invoice', 'number': '11-2', 'name': 'Геннадий Покемонов'},
    {'type': 'insurance', 'number': '10006', 'name': 'Аристарх Павлов'}
]

directories = {
    '1': ['2207 876234', '11-2', '5455 028765'],
    '2': ['10006', '5400 028765', '5455 002299'],
    '3': []
}

def p(documnet_number):
    for x in documents:
        if x['number'] == documnet_number:
            return x['name']
                
#l – list – команда, которая выведет список всех документов в формате
#passport "2207 876234" "Василий Гупкин"        
        
def l():
    for x in documents:
        type = x['type']
        number = x['number']
        name = x['name']
        print('{0}"{1}" "{2}"'.format(type, number, name))
        document_number = input("Введите номер документа: ")
print(p(document_number))

#as – add shelf – команда, которая спросит номер новой полки и добавит ее в перечень

def add_shelf():
    number = input("Введите номер новой полки: ")
    directories[number] = []

directories = {
    '1': ['2207 876234', '11-2', '5455 028765'],
    '2': ['10006', '5400 028765', '5455 002299'],
    '3': []
}

Пункт 2. Пользователь по команде "s" может по номеру документа узнать на какой полке он хранится

#s – shelf – команда, которая спросит номер документа и выведет номер полки, на которой он находится
#Правильно обработайте ситуацию, когда пользователь будет вводить несуществующий документ.
# for k in directories:
#         print(directories[k])

def s(document_number):
    for k in directories:
        if document_number in directories[k]:
            return k
    return "document undefined"

document_number = input("Введите номер документа: ")
print(s(document_number))

Пункт 3. Пользователь по команде "l" может увидеть полную информацию по всем документам

documents = [
    {'type': 'passport', 'number': '2207 876234', 'name': 'Василий Гупкин'},
    {'type': 'invoice', 'number': '11-2', 'name': 'Геннадий Покемонов'},
    {'type': 'insurance', 'number': '10006', 'name': 'Аристарх Павлов'}
]

directories = {
    '1': ['2207 876234', '11-2', '5455 028765'],
    '2': ['10006', '5400 028765', '5455 002299'],
    '3': []
}

#l – list – команда, которая выведет список всех документов в формате
#passport "2207 876234" "Василий Гупкин"        
        
def l():
    for x in documents:
        type = x['type']
        number = x['number']
        name = x['name']
        print('"{0}" "{1}" "{2}"'.format(type, number, name))              
        document_number = input("Введите номер документа: ")
print(p(document_number))
print(documents)
print(directories)

Пункт 4. Пользователь по команде "ads" может добавить новую полку

#a – add – команда, которая добавит новый документ в каталог и в перечень полок, 
#спросив его номер, тип, имя владельца и номер полки, на котором он будет храниться.
directories = {
    '1': ['2207 876234', '11-2', '5455 028765'],
    '2': ['10006', '5400 028765', '5455 002299'],
    '3': []
}

documents = [
    {'type': 'passport', 'number': '2207 876234', 'name': 'Василий Гупкин'},
    {'type': 'invoice', 'number': '11-2', 'name': 'Геннадий Покемонов'},
    {'type': 'insurance', 'number': '10006', 'name': 'Аристарх Павлов'}
]

def a(doc_type, doc_number, doc_owner, shelf_id):
  # Проверяем существование полки
    if shelf_id not in directories:
        return "Полки не существует"
    
  # Создаем словарь нового документа
    new_doc = dict(type=doc_type, number=doc_number, name=doc_owner)

  # Добавляем документ в список документов
    documents.append(new_doc)
  # Добавляем документ на необходимую полку
    directories[shelf_id] += [doc_number]

    return "Документ успешно добавлен"

doc_type = input("Введите тип докемента: ")
doc_number = input("Введите номер документа: ")
doc_owner = input("Введите имя владельца документа: ")
shelf_id = input("Введит номер полки {} : ".format(directories.keys()))
print(a(doc_type, doc_number, doc_owner, shelf_id))
print('')
print(documents)
print('')
print(directories)

Пункт 5. Пользователь по команде "ds" может удалить существующую полку из данных (только если она пустая)

#ds – delete – команда, которая спросит номер документа и удалит его из каталога и из перечня полок. 
#Предусмотрите сценарий, когда пользователь вводит несуществующий документ;

directories = {
    '1': ['2207 876234', '11-2', '5455 028765'],
    '2': ['10006', '5400 028765', '5455 002299'],
    '3': []
}

documents = [
    {'type': 'passport', 'number': '2207 876234', 'name': 'Василий Гупкин'},
    {'type': 'invoice', 'number': '11-2', 'name': 'Геннадий Покемонов'},
    {'type': 'insurance', 'number': '10006', 'name': 'Аристарх Павлов'}
]

def d(doc_number):
    initial_len = len(documents)
    for i, d in enumerate(documents):
        if d["number"] == doc_number:
            documents.pop(i)

    if initial_len == len(documents):
        return "Документ не существует"

    for key, value in directories.items():
        if doc_number in value:
            value.remove(doc_number)

    return "Документ успешно удален"

doc_number = input("Введите номер документа, который хотите удалить: ")
print(d(doc_number))
print(documents)
print(directories)
